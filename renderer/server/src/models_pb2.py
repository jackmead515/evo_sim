# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: models.proto
"""Generated protocol buffer code."""
from google.protobuf.internal import enum_type_wrapper
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n\x0cmodels.proto\x12\x06models\"\x1d\n\x05Point\x12\t\n\x01x\x18\x01 \x02(\x02\x12\t\n\x01y\x18\x02 \x02(\x02\"*\n\tDimension\x12\r\n\x05width\x18\x01 \x02(\x02\x12\x0e\n\x06height\x18\x02 \x02(\x02\"C\n\x0bTranslation\x12\"\n\x0btranslation\x18\x01 \x02(\x0b\x32\r.models.Point\x12\x10\n\x08rotation\x18\x02 \x02(\x02\"(\n\x05\x42lock\x12\x1f\n\x08position\x18\x01 \x02(\x0b\x32\r.models.Point\"N\n\x06\x42ounds\x12\x1d\n\x06\x62locks\x18\x01 \x03(\x0b\x32\r.models.Point\x12%\n\ndimensions\x18\x02 \x02(\x0b\x32\x11.models.Dimension\"\xb3\x01\n\x06Traits\x12\x13\n\x0brestitution\x18\x01 \x02(\x02\x12\x10\n\x08\x66riction\x18\x02 \x02(\x02\x12\x0f\n\x07stamina\x18\x03 \x02(\x02\x12\x12\n\nblock_mass\x18\x04 \x02(\x02\x12\x14\n\x0c\x62lock_amount\x18\x05 \x02(\r\x12\x10\n\x08strength\x18\x06 \x02(\x02\x12\r\n\x05\x63olor\x18\x07 \x03(\x02\x12\x12\n\ngene_codes\x18\x08 \x03(\t\x12\x12\n\nblock_size\x18\t \x02(\x02\"O\n\x06Neuron\x12&\n\nactivation\x18\x01 \x02(\x0e\x32\x12.models.Activation\x12\x0c\n\x04\x62ias\x18\x02 \x02(\x02\x12\x0f\n\x07weights\x18\x03 \x03(\x02\"o\n\x05\x42rain\x12&\n\nactivation\x18\x01 \x02(\x0e\x32\x12.models.Activation\x12\x1e\n\x06hidden\x18\x02 \x03(\x0b\x32\x0e.models.Neuron\x12\x1e\n\x06output\x18\x03 \x03(\x0b\x32\x0e.models.Neuron\"}\n\x08\x43reature\x12\x13\n\x0b\x63reature_id\x18\x01 \x02(\r\x12\x1c\n\x05\x62rain\x18\x02 \x02(\x0b\x32\r.models.Brain\x12\x1e\n\x06traits\x18\x03 \x02(\x0b\x32\x0e.models.Traits\x12\x1e\n\x06\x62ounds\x18\x04 \x02(\x0b\x32\x0e.models.Bounds\"q\n\rCreatureState\x12\x13\n\x0b\x63reature_id\x18\x01 \x02(\r\x12(\n\x0btranslation\x18\x02 \x02(\x0b\x32\x13.models.Translation\x12\x0f\n\x07stamina\x18\x03 \x02(\x02\x12\x10\n\x08\x64\x65\x63ision\x18\x04 \x02(\r\"|\n\x08\x42oundary\x12\x1f\n\x08position\x18\x01 \x02(\x0b\x32\r.models.Point\x12%\n\ndimensions\x18\x02 \x02(\x0b\x32\x11.models.Dimension\x12(\n\x0btranslation\x18\x03 \x02(\x0b\x32\x13.models.Translation\"\xad\x01\n\x04Step\x12\x0f\n\x07step_id\x18\x01 \x02(\r\x12(\n\x06states\x18\x02 \x03(\x0b\x32\x18.models.Step.StatesEntry\x12$\n\nboundaries\x18\x03 \x03(\x0b\x32\x10.models.Boundary\x1a\x44\n\x0bStatesEntry\x12\x0b\n\x03key\x18\x01 \x01(\r\x12$\n\x05value\x18\x02 \x01(\x0b\x32\x15.models.CreatureState:\x02\x38\x01\"\xab\x01\n\x05\x43ycle\x12\x10\n\x08\x63ycle_id\x18\x01 \x02(\r\x12/\n\tcreatures\x18\x02 \x03(\x0b\x32\x1c.models.Cycle.CreaturesEntry\x12\x1b\n\x05steps\x18\x03 \x03(\x0b\x32\x0c.models.Step\x1a\x42\n\x0e\x43reaturesEntry\x12\x0b\n\x03key\x18\x01 \x01(\r\x12\x1f\n\x05value\x18\x02 \x01(\x0b\x32\x10.models.Creature:\x02\x38\x01\"\x85\x05\n\tConstants\x12\x13\n\x0bworld_width\x18\x01 \x02(\r\x12\x14\n\x0cworld_height\x18\x02 \x02(\r\x12\x11\n\tmax_steps\x18\x03 \x02(\r\x12\x17\n\x0f\x63reature_amount\x18\x04 \x02(\r\x12\x1a\n\x12initial_brain_size\x18\x05 \x02(\r\x12\x16\n\x0emax_brain_size\x18\x06 \x02(\r\x12\x16\n\x0emin_brain_size\x18\x07 \x02(\r\x12\x1b\n\x13\x62rain_evolve_chance\x18\x08 \x02(\x02\x12\x1e\n\x16min_brain_weight_nudge\x18\t \x02(\x02\x12\x1e\n\x16max_brain_weight_nudge\x18\n \x02(\x02\x12\x18\n\x10\x62rain_input_size\x18\x0b \x02(\r\x12\x19\n\x11\x62rain_output_size\x18\x0c \x02(\r\x12\x1c\n\x14initial_block_amount\x18\r \x02(\r\x12\x18\n\x10min_block_amount\x18\x0e \x02(\r\x12\x18\n\x10max_block_amount\x18\x0f \x02(\r\x12\"\n\x1a\x62lock_amount_evolve_chance\x18\x10 \x02(\x02\x12\x1a\n\x12initial_block_size\x18\x11 \x02(\x02\x12\x16\n\x0emax_block_size\x18\x12 \x02(\x02\x12\x16\n\x0emin_block_size\x18\x13 \x02(\x02\x12 \n\x18\x62lock_size_evolve_chance\x18\x14 \x02(\x02\x12\x1c\n\x14min_block_size_nudge\x18\x15 \x02(\x02\x12\x1c\n\x14max_block_size_nudge\x18\x16 \x02(\x02\x12#\n\x1b\x62lock_arrange_evolve_chance\x18\x17 \x02(\x02\"\\\n\nSimulation\x12\x15\n\rsimulation_id\x18\x01 \x02(\r\x12$\n\tconstants\x18\x02 \x02(\x0b\x32\x11.models.Constants\x12\x11\n\tcycle_ids\x18\x03 \x03(\r*&\n\nActivation\x12\x0b\n\x07Sigmoid\x10\x01\x12\x0b\n\x07Softmax\x10\x02')

_ACTIVATION = DESCRIPTOR.enum_types_by_name['Activation']
Activation = enum_type_wrapper.EnumTypeWrapper(_ACTIVATION)
Sigmoid = 1
Softmax = 2


_POINT = DESCRIPTOR.message_types_by_name['Point']
_DIMENSION = DESCRIPTOR.message_types_by_name['Dimension']
_TRANSLATION = DESCRIPTOR.message_types_by_name['Translation']
_BLOCK = DESCRIPTOR.message_types_by_name['Block']
_BOUNDS = DESCRIPTOR.message_types_by_name['Bounds']
_TRAITS = DESCRIPTOR.message_types_by_name['Traits']
_NEURON = DESCRIPTOR.message_types_by_name['Neuron']
_BRAIN = DESCRIPTOR.message_types_by_name['Brain']
_CREATURE = DESCRIPTOR.message_types_by_name['Creature']
_CREATURESTATE = DESCRIPTOR.message_types_by_name['CreatureState']
_BOUNDARY = DESCRIPTOR.message_types_by_name['Boundary']
_STEP = DESCRIPTOR.message_types_by_name['Step']
_STEP_STATESENTRY = _STEP.nested_types_by_name['StatesEntry']
_CYCLE = DESCRIPTOR.message_types_by_name['Cycle']
_CYCLE_CREATURESENTRY = _CYCLE.nested_types_by_name['CreaturesEntry']
_CONSTANTS = DESCRIPTOR.message_types_by_name['Constants']
_SIMULATION = DESCRIPTOR.message_types_by_name['Simulation']
Point = _reflection.GeneratedProtocolMessageType('Point', (_message.Message,), {
  'DESCRIPTOR' : _POINT,
  '__module__' : 'models_pb2'
  # @@protoc_insertion_point(class_scope:models.Point)
  })
_sym_db.RegisterMessage(Point)

Dimension = _reflection.GeneratedProtocolMessageType('Dimension', (_message.Message,), {
  'DESCRIPTOR' : _DIMENSION,
  '__module__' : 'models_pb2'
  # @@protoc_insertion_point(class_scope:models.Dimension)
  })
_sym_db.RegisterMessage(Dimension)

Translation = _reflection.GeneratedProtocolMessageType('Translation', (_message.Message,), {
  'DESCRIPTOR' : _TRANSLATION,
  '__module__' : 'models_pb2'
  # @@protoc_insertion_point(class_scope:models.Translation)
  })
_sym_db.RegisterMessage(Translation)

Block = _reflection.GeneratedProtocolMessageType('Block', (_message.Message,), {
  'DESCRIPTOR' : _BLOCK,
  '__module__' : 'models_pb2'
  # @@protoc_insertion_point(class_scope:models.Block)
  })
_sym_db.RegisterMessage(Block)

Bounds = _reflection.GeneratedProtocolMessageType('Bounds', (_message.Message,), {
  'DESCRIPTOR' : _BOUNDS,
  '__module__' : 'models_pb2'
  # @@protoc_insertion_point(class_scope:models.Bounds)
  })
_sym_db.RegisterMessage(Bounds)

Traits = _reflection.GeneratedProtocolMessageType('Traits', (_message.Message,), {
  'DESCRIPTOR' : _TRAITS,
  '__module__' : 'models_pb2'
  # @@protoc_insertion_point(class_scope:models.Traits)
  })
_sym_db.RegisterMessage(Traits)

Neuron = _reflection.GeneratedProtocolMessageType('Neuron', (_message.Message,), {
  'DESCRIPTOR' : _NEURON,
  '__module__' : 'models_pb2'
  # @@protoc_insertion_point(class_scope:models.Neuron)
  })
_sym_db.RegisterMessage(Neuron)

Brain = _reflection.GeneratedProtocolMessageType('Brain', (_message.Message,), {
  'DESCRIPTOR' : _BRAIN,
  '__module__' : 'models_pb2'
  # @@protoc_insertion_point(class_scope:models.Brain)
  })
_sym_db.RegisterMessage(Brain)

Creature = _reflection.GeneratedProtocolMessageType('Creature', (_message.Message,), {
  'DESCRIPTOR' : _CREATURE,
  '__module__' : 'models_pb2'
  # @@protoc_insertion_point(class_scope:models.Creature)
  })
_sym_db.RegisterMessage(Creature)

CreatureState = _reflection.GeneratedProtocolMessageType('CreatureState', (_message.Message,), {
  'DESCRIPTOR' : _CREATURESTATE,
  '__module__' : 'models_pb2'
  # @@protoc_insertion_point(class_scope:models.CreatureState)
  })
_sym_db.RegisterMessage(CreatureState)

Boundary = _reflection.GeneratedProtocolMessageType('Boundary', (_message.Message,), {
  'DESCRIPTOR' : _BOUNDARY,
  '__module__' : 'models_pb2'
  # @@protoc_insertion_point(class_scope:models.Boundary)
  })
_sym_db.RegisterMessage(Boundary)

Step = _reflection.GeneratedProtocolMessageType('Step', (_message.Message,), {

  'StatesEntry' : _reflection.GeneratedProtocolMessageType('StatesEntry', (_message.Message,), {
    'DESCRIPTOR' : _STEP_STATESENTRY,
    '__module__' : 'models_pb2'
    # @@protoc_insertion_point(class_scope:models.Step.StatesEntry)
    })
  ,
  'DESCRIPTOR' : _STEP,
  '__module__' : 'models_pb2'
  # @@protoc_insertion_point(class_scope:models.Step)
  })
_sym_db.RegisterMessage(Step)
_sym_db.RegisterMessage(Step.StatesEntry)

Cycle = _reflection.GeneratedProtocolMessageType('Cycle', (_message.Message,), {

  'CreaturesEntry' : _reflection.GeneratedProtocolMessageType('CreaturesEntry', (_message.Message,), {
    'DESCRIPTOR' : _CYCLE_CREATURESENTRY,
    '__module__' : 'models_pb2'
    # @@protoc_insertion_point(class_scope:models.Cycle.CreaturesEntry)
    })
  ,
  'DESCRIPTOR' : _CYCLE,
  '__module__' : 'models_pb2'
  # @@protoc_insertion_point(class_scope:models.Cycle)
  })
_sym_db.RegisterMessage(Cycle)
_sym_db.RegisterMessage(Cycle.CreaturesEntry)

Constants = _reflection.GeneratedProtocolMessageType('Constants', (_message.Message,), {
  'DESCRIPTOR' : _CONSTANTS,
  '__module__' : 'models_pb2'
  # @@protoc_insertion_point(class_scope:models.Constants)
  })
_sym_db.RegisterMessage(Constants)

Simulation = _reflection.GeneratedProtocolMessageType('Simulation', (_message.Message,), {
  'DESCRIPTOR' : _SIMULATION,
  '__module__' : 'models_pb2'
  # @@protoc_insertion_point(class_scope:models.Simulation)
  })
_sym_db.RegisterMessage(Simulation)

if _descriptor._USE_C_DESCRIPTORS == False:

  DESCRIPTOR._options = None
  _STEP_STATESENTRY._options = None
  _STEP_STATESENTRY._serialized_options = b'8\001'
  _CYCLE_CREATURESENTRY._options = None
  _CYCLE_CREATURESENTRY._serialized_options = b'8\001'
  _ACTIVATION._serialized_start=2126
  _ACTIVATION._serialized_end=2164
  _POINT._serialized_start=24
  _POINT._serialized_end=53
  _DIMENSION._serialized_start=55
  _DIMENSION._serialized_end=97
  _TRANSLATION._serialized_start=99
  _TRANSLATION._serialized_end=166
  _BLOCK._serialized_start=168
  _BLOCK._serialized_end=208
  _BOUNDS._serialized_start=210
  _BOUNDS._serialized_end=288
  _TRAITS._serialized_start=291
  _TRAITS._serialized_end=470
  _NEURON._serialized_start=472
  _NEURON._serialized_end=551
  _BRAIN._serialized_start=553
  _BRAIN._serialized_end=664
  _CREATURE._serialized_start=666
  _CREATURE._serialized_end=791
  _CREATURESTATE._serialized_start=793
  _CREATURESTATE._serialized_end=906
  _BOUNDARY._serialized_start=908
  _BOUNDARY._serialized_end=1032
  _STEP._serialized_start=1035
  _STEP._serialized_end=1208
  _STEP_STATESENTRY._serialized_start=1140
  _STEP_STATESENTRY._serialized_end=1208
  _CYCLE._serialized_start=1211
  _CYCLE._serialized_end=1382
  _CYCLE_CREATURESENTRY._serialized_start=1316
  _CYCLE_CREATURESENTRY._serialized_end=1382
  _CONSTANTS._serialized_start=1385
  _CONSTANTS._serialized_end=2030
  _SIMULATION._serialized_start=2032
  _SIMULATION._serialized_end=2124
# @@protoc_insertion_point(module_scope)
