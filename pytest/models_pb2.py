# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: models.proto
"""Generated protocol buffer code."""
from google.protobuf.internal import enum_type_wrapper
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n\x0cmodels.proto\x12\x06models\"\x1d\n\x05Point\x12\t\n\x01x\x18\x01 \x02(\x02\x12\t\n\x01y\x18\x02 \x02(\x02\"G\n\x05\x42lock\x12\x1f\n\x08position\x18\x01 \x02(\x0b\x32\r.models.Point\x12\r\n\x05width\x18\x02 \x02(\x02\x12\x0e\n\x06height\x18\x03 \x02(\x02\"F\n\x06\x42ounds\x12\x1d\n\x06\x62locks\x18\x01 \x03(\x0b\x32\r.models.Block\x12\r\n\x05width\x18\x02 \x02(\r\x12\x0e\n\x06height\x18\x03 \x02(\r\"`\n\x06Traits\x12\x13\n\x0brestitution\x18\x01 \x02(\x02\x12\x10\n\x08\x66riction\x18\x02 \x02(\x02\x12\x0f\n\x07stamina\x18\x03 \x02(\x02\x12\x0c\n\x04mass\x18\x04 \x02(\x02\x12\x10\n\x08strength\x18\x05 \x02(\x02\"O\n\x06Neuron\x12&\n\nactivation\x18\x01 \x02(\x0e\x32\x12.models.Activation\x12\x0c\n\x04\x62ias\x18\x02 \x02(\x02\x12\x0f\n\x07weights\x18\x03 \x03(\x02\"o\n\x05\x42rain\x12&\n\nactivation\x18\x01 \x02(\x0e\x32\x12.models.Activation\x12\x1e\n\x06hidden\x18\x02 \x03(\x0b\x32\x0e.models.Neuron\x12\x1e\n\x06output\x18\x03 \x03(\x0b\x32\x0e.models.Neuron\"}\n\x08\x43reature\x12\x13\n\x0b\x63reature_id\x18\x01 \x02(\r\x12\x1c\n\x05\x62rain\x18\x02 \x02(\x0b\x32\r.models.Brain\x12\x1e\n\x06traits\x18\x03 \x02(\x0b\x32\x0e.models.Traits\x12\x1e\n\x06\x62ounds\x18\x04 \x02(\x0b\x32\x0e.models.Bounds\"}\n\rCreatureState\x12\x13\n\x0b\x63reature_id\x18\x01 \x02(\r\x12\"\n\x0btranslation\x18\x02 \x02(\x0b\x32\r.models.Point\x12\x10\n\x08rotation\x18\x03 \x02(\x02\x12\x0f\n\x07stamina\x18\x04 \x02(\x02\x12\x10\n\x08\x64\x65\x63ision\x18\x05 \x02(\r\"&\n\x04Wall\x12\x1e\n\x06\x62ounds\x18\x01 \x02(\x0b\x32\x0e.models.Bounds\"\xac\x01\n\x04Step\x12\x0f\n\x07step_id\x18\x01 \x02(\r\x12(\n\x06states\x18\x02 \x03(\x0b\x32\x18.models.Step.StatesEntry\x12#\n\rdynamic_walls\x18\x03 \x03(\x0b\x32\x0c.models.Wall\x1a\x44\n\x0bStatesEntry\x12\x0b\n\x03key\x18\x01 \x01(\r\x12$\n\x05value\x18\x02 \x01(\x0b\x32\x15.models.CreatureState:\x02\x38\x01\"\xc8\x01\n\x05\x43ycle\x12\x10\n\x08\x63ycle_id\x18\x01 \x02(\r\x12/\n\tcreatures\x18\x02 \x03(\x0b\x32\x1c.models.Cycle.CreaturesEntry\x12\x1b\n\x05walls\x18\x03 \x03(\x0b\x32\x0c.models.Wall\x12\x1b\n\x05steps\x18\x04 \x03(\x0b\x32\x0c.models.Step\x1a\x42\n\x0e\x43reaturesEntry\x12\x0b\n\x03key\x18\x01 \x01(\r\x12\x1f\n\x05value\x18\x02 \x01(\x0b\x32\x10.models.Creature:\x02\x38\x01\"\xb2\x01\n\tConstants\x12\x12\n\nmax_cycles\x18\x01 \x02(\r\x12\x11\n\tmax_steps\x18\x02 \x02(\r\x12\x17\n\x0f\x63reature_amount\x18\x03 \x02(\r\x12\x12\n\nbrain_size\x18\x04 \x02(\r\x12\x12\n\ninput_size\x18\x05 \x02(\r\x12\x13\n\x0boutput_size\x18\x06 \x02(\r\x12\x14\n\x0c\x62lock_amount\x18\x07 \x02(\r\x12\x12\n\nblock_size\x18\x08 \x02(\x02*&\n\nActivation\x12\x0b\n\x07Sigmoid\x10\x01\x12\x0b\n\x07Softmax\x10\x02')

_ACTIVATION = DESCRIPTOR.enum_types_by_name['Activation']
Activation = enum_type_wrapper.EnumTypeWrapper(_ACTIVATION)
Sigmoid = 1
Softmax = 2


_POINT = DESCRIPTOR.message_types_by_name['Point']
_BLOCK = DESCRIPTOR.message_types_by_name['Block']
_BOUNDS = DESCRIPTOR.message_types_by_name['Bounds']
_TRAITS = DESCRIPTOR.message_types_by_name['Traits']
_NEURON = DESCRIPTOR.message_types_by_name['Neuron']
_BRAIN = DESCRIPTOR.message_types_by_name['Brain']
_CREATURE = DESCRIPTOR.message_types_by_name['Creature']
_CREATURESTATE = DESCRIPTOR.message_types_by_name['CreatureState']
_WALL = DESCRIPTOR.message_types_by_name['Wall']
_STEP = DESCRIPTOR.message_types_by_name['Step']
_STEP_STATESENTRY = _STEP.nested_types_by_name['StatesEntry']
_CYCLE = DESCRIPTOR.message_types_by_name['Cycle']
_CYCLE_CREATURESENTRY = _CYCLE.nested_types_by_name['CreaturesEntry']
_CONSTANTS = DESCRIPTOR.message_types_by_name['Constants']
Point = _reflection.GeneratedProtocolMessageType('Point', (_message.Message,), {
  'DESCRIPTOR' : _POINT,
  '__module__' : 'models_pb2'
  # @@protoc_insertion_point(class_scope:models.Point)
  })
_sym_db.RegisterMessage(Point)

Block = _reflection.GeneratedProtocolMessageType('Block', (_message.Message,), {
  'DESCRIPTOR' : _BLOCK,
  '__module__' : 'models_pb2'
  # @@protoc_insertion_point(class_scope:models.Block)
  })
_sym_db.RegisterMessage(Block)

Bounds = _reflection.GeneratedProtocolMessageType('Bounds', (_message.Message,), {
  'DESCRIPTOR' : _BOUNDS,
  '__module__' : 'models_pb2'
  # @@protoc_insertion_point(class_scope:models.Bounds)
  })
_sym_db.RegisterMessage(Bounds)

Traits = _reflection.GeneratedProtocolMessageType('Traits', (_message.Message,), {
  'DESCRIPTOR' : _TRAITS,
  '__module__' : 'models_pb2'
  # @@protoc_insertion_point(class_scope:models.Traits)
  })
_sym_db.RegisterMessage(Traits)

Neuron = _reflection.GeneratedProtocolMessageType('Neuron', (_message.Message,), {
  'DESCRIPTOR' : _NEURON,
  '__module__' : 'models_pb2'
  # @@protoc_insertion_point(class_scope:models.Neuron)
  })
_sym_db.RegisterMessage(Neuron)

Brain = _reflection.GeneratedProtocolMessageType('Brain', (_message.Message,), {
  'DESCRIPTOR' : _BRAIN,
  '__module__' : 'models_pb2'
  # @@protoc_insertion_point(class_scope:models.Brain)
  })
_sym_db.RegisterMessage(Brain)

Creature = _reflection.GeneratedProtocolMessageType('Creature', (_message.Message,), {
  'DESCRIPTOR' : _CREATURE,
  '__module__' : 'models_pb2'
  # @@protoc_insertion_point(class_scope:models.Creature)
  })
_sym_db.RegisterMessage(Creature)

CreatureState = _reflection.GeneratedProtocolMessageType('CreatureState', (_message.Message,), {
  'DESCRIPTOR' : _CREATURESTATE,
  '__module__' : 'models_pb2'
  # @@protoc_insertion_point(class_scope:models.CreatureState)
  })
_sym_db.RegisterMessage(CreatureState)

Wall = _reflection.GeneratedProtocolMessageType('Wall', (_message.Message,), {
  'DESCRIPTOR' : _WALL,
  '__module__' : 'models_pb2'
  # @@protoc_insertion_point(class_scope:models.Wall)
  })
_sym_db.RegisterMessage(Wall)

Step = _reflection.GeneratedProtocolMessageType('Step', (_message.Message,), {

  'StatesEntry' : _reflection.GeneratedProtocolMessageType('StatesEntry', (_message.Message,), {
    'DESCRIPTOR' : _STEP_STATESENTRY,
    '__module__' : 'models_pb2'
    # @@protoc_insertion_point(class_scope:models.Step.StatesEntry)
    })
  ,
  'DESCRIPTOR' : _STEP,
  '__module__' : 'models_pb2'
  # @@protoc_insertion_point(class_scope:models.Step)
  })
_sym_db.RegisterMessage(Step)
_sym_db.RegisterMessage(Step.StatesEntry)

Cycle = _reflection.GeneratedProtocolMessageType('Cycle', (_message.Message,), {

  'CreaturesEntry' : _reflection.GeneratedProtocolMessageType('CreaturesEntry', (_message.Message,), {
    'DESCRIPTOR' : _CYCLE_CREATURESENTRY,
    '__module__' : 'models_pb2'
    # @@protoc_insertion_point(class_scope:models.Cycle.CreaturesEntry)
    })
  ,
  'DESCRIPTOR' : _CYCLE,
  '__module__' : 'models_pb2'
  # @@protoc_insertion_point(class_scope:models.Cycle)
  })
_sym_db.RegisterMessage(Cycle)
_sym_db.RegisterMessage(Cycle.CreaturesEntry)

Constants = _reflection.GeneratedProtocolMessageType('Constants', (_message.Message,), {
  'DESCRIPTOR' : _CONSTANTS,
  '__module__' : 'models_pb2'
  # @@protoc_insertion_point(class_scope:models.Constants)
  })
_sym_db.RegisterMessage(Constants)

if _descriptor._USE_C_DESCRIPTORS == False:

  DESCRIPTOR._options = None
  _STEP_STATESENTRY._options = None
  _STEP_STATESENTRY._serialized_options = b'8\001'
  _CYCLE_CREATURESENTRY._options = None
  _CYCLE_CREATURESENTRY._serialized_options = b'8\001'
  _ACTIVATION._serialized_start=1345
  _ACTIVATION._serialized_end=1383
  _POINT._serialized_start=24
  _POINT._serialized_end=53
  _BLOCK._serialized_start=55
  _BLOCK._serialized_end=126
  _BOUNDS._serialized_start=128
  _BOUNDS._serialized_end=198
  _TRAITS._serialized_start=200
  _TRAITS._serialized_end=296
  _NEURON._serialized_start=298
  _NEURON._serialized_end=377
  _BRAIN._serialized_start=379
  _BRAIN._serialized_end=490
  _CREATURE._serialized_start=492
  _CREATURE._serialized_end=617
  _CREATURESTATE._serialized_start=619
  _CREATURESTATE._serialized_end=744
  _WALL._serialized_start=746
  _WALL._serialized_end=784
  _STEP._serialized_start=787
  _STEP._serialized_end=959
  _STEP_STATESENTRY._serialized_start=891
  _STEP_STATESENTRY._serialized_end=959
  _CYCLE._serialized_start=962
  _CYCLE._serialized_end=1162
  _CYCLE_CREATURESENTRY._serialized_start=1096
  _CYCLE_CREATURESENTRY._serialized_end=1162
  _CONSTANTS._serialized_start=1165
  _CONSTANTS._serialized_end=1343
# @@protoc_insertion_point(module_scope)
